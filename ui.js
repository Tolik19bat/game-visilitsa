const defaultKeyboard = [
    {char: '–∞'},
    {char: '–±'},
    {char: '–≤'},
    {char: '–≥'},
    {char: '–¥'},
    {char: '–µ'},
    {char: '–∂'},
    {char: '–∑'},
    {char: '–∏'},
    {char: '–π'},
    {char: '–∫'},
    {char: '–ª'},
    {char: '–º'},
    {char: '–Ω'},
    {char: '–æ'},
    {char: '–ø'},
    {char: '—Ä'},
    {char: '—Å'},
    {char: '—Ç'},
    {char: '—É'},
    {char: '—Ñ'},
    {char: '—Ö'},
    {char: '—Ü'},
    {char: '—á'},
    {char: '—à'},
    {char: '—â'},
    {char: '—ä'},
    {char: '—ã'},
    {char: '—å'},
    {char: '—ç'},
    {char: '—é'},
    {char: '—è'},
  ];
  
  //http://free-generator.ru/words.html
const dictionary = [
    '—ç–ª—å—Ñ',
    '–∫–æ–ª–ª–µ–≥–∞',
    '–ø–æ—á–≤–∞',
    '–ø–∞—Ä–∞–∑–∏—Ç',
    '—à—Ç—ã–∫',
    '–∑–∞–ø—Ä–æ—Å',
    '–∫–∞–º–∏–Ω',
    '–ø–∞–≤–∏–ª—å–æ–Ω',
    '—Å–∫–æ—Ä–æ–¥–∞',
    '—ç–ª–∏—Ç–∞',
    '–º–æ—á–∞–ª–∫–∞',
    '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å',
    '–ø—Ä–∏—á–∏–Ω–∞',
    '–Ω–æ–≥–∞',
    '–≤—Å—Ç—Ä–µ—á–∞',
    '–Ω–∞–ª–æ–≥',
    '—Å–ª–æ–≤–æ',
    '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ',
    '–∏–∑–≤–µ—Å—Ç–∏–µ',
    '—Å–ª—É—á–∞–π',
    '–ø–æ–ª–µ',
    '–∏–∑–¥–µ–ª–∏–µ',
    '–∫–æ–Ω—Ç–∞–∫—Ç',
    '—Å–µ–Ω—Ç—è–±—Ä—å',
    '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
    '—Ä–µ—à–µ–Ω–∏–µ',
    '—Ñ–∏–≥—É—Ä–∞',
    '–≤–µ—â–µ—Å—Ç–≤–æ',
    '—É–±–∏–π—Å—Ç–≤–æ',
    '–∫—É–ª–∞–∫',
    '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è',
    '–∫–∞–ø–∏—Ç–∞–ª',
    '–≥–µ—Ä–æ–π',
    '–º–æ—â–Ω–æ—Å—Ç—å',
    '–ø—É–Ω–∫—Ç',
    '–º–∞—à–∏–Ω–∞',
    '—Å–æ–∑–Ω–∞–Ω–∏–µ',
    '—Å–æ–ª–¥–∞—Ç',
    '–∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
    '–∏—Å–∫—É—Å—Å—Ç–≤–æ',
    '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
    '–¥–µ–Ω—å–≥–∞',
    '–º—è—Å–æ',
    '—Ä–∞–±–æ—Ç–Ω–∏–∫',
    '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å',
    '–∫–∞–º–µ–Ω—å',
    '–∞–≤—Ç–æ—Ä',
    '–ø—Ä–æ–±–ª–µ–º–∞',
    '–¥–µ—Ç–∞–ª—å'
  ];
//=========================================================================


//=========================================    =========================
// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∏—Å–æ–≤–∞—Ç—å –ø—É—Å—Ç—É—é –≤–∏—Å–µ–ª–∏—Ü—É      UI
// - 1 –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≥–æ–ª–æ–≤–∞
// - 1 –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–ª–æ
// - 1 –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ª–µ–≤–∞—è —Ä—É–∫–∞
// - 1 –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∞—è —Ä—É–∫–∞
// - 1 –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ª–µ–≤–∞—è –Ω–æ–≥–∞
// - 1 –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∞—è –Ω–æ–≥–∞
// - 1 game over

const canvas = document.getElementsByTagName("canvas")[0];
const canvasContext = canvas.getContext('2d');
canvas.width = 500;
canvas.height = 220;

function drawPerson(errorsCount) {
  canvasContext.clearRect(0, 0, 100, canvas.height);
  canvasContext.fillRect(5, 140, 80, 10);
  canvasContext.fillRect(7, 10, 5, 130);
  canvasContext.lineWidth = 3;

  canvasContext.beginPath();
  canvasContext.strokeStyle = 'black';
  if(errorsCount > 0) {
    // —Å—Ç–æ–π–∫–∞
    canvasContext.fillRect(10, 15, 40, 3);
    canvasContext.fillRect(40, 15, 2, 10);
  }

  if(errorsCount > 1) {
    // –≥–æ–ª–æ–≤–∞
    canvasContext.arc(41, 40, 15, 0, 360);

    canvasContext.moveTo(35, 33);
    canvasContext.arc(35, 35, 1, 0, 360);

    canvasContext.moveTo(47, 33);
    canvasContext.arc(47, 35, 1, 0, 360);

    canvasContext.moveTo(49, 50);
    canvasContext.arc(41, 55, 10, -(Math.PI * 0.2), Math.PI + (Math.PI * 0.2), true);
  }

  if(errorsCount > 2) {
    // —Ç–µ–ª–æ
    canvasContext.moveTo(41, 55);
    canvasContext.lineTo(41, 95);
  }

  if(errorsCount > 3) {
    // –ª–µ–≤–∞—è —Ä—É–∫–∞
    canvasContext.moveTo(41, 60);
    canvasContext.lineTo(30, 80);
  }

  if(errorsCount > 4) {
    // –ø—Ä–∞–≤–∞—è —Ä—É–∫–∞
    canvasContext.moveTo(41, 60);
    canvasContext.lineTo(52, 80);
  }

  if(errorsCount > 5) {
    // –ª–µ–≤–∞—è –Ω–æ–≥–∞
    canvasContext.moveTo(41, 95);
    canvasContext.lineTo(30, 120);
  }

  if(errorsCount > 6) {
    // –ø—Ä–∞–≤–∞—è –Ω–æ–≥–∞
    canvasContext.moveTo(41, 95);
    canvasContext.lineTo(52, 120);
  }
  canvasContext.stroke();
}

function drawBoard(lettersState) {
  canvasContext.font = "35px serif";
  const leftPadding = 120;
  const lettersInLine = 8;
  canvasContext.lineWidth = 2;
  canvasContext.clearRect(leftPadding - 10, 0, canvas.width - leftPadding, canvas.height - 60);
  
  for(let i = 0; i < lettersState.length; i++) {
    const currentLetter = lettersState[i];
    const yPosition = 35 * Math.floor((i / lettersInLine) + 1);
    const xPosition = leftPadding + i % lettersInLine * 35;
    canvasContext.fillText(currentLetter.char, xPosition, yPosition);

    if(currentLetter.success) {
      canvasContext.beginPath();
      canvasContext.strokeStyle = 'green';
      canvasContext.moveTo(xPosition + 25, yPosition - 10);
      canvasContext.arc(xPosition + 10, yPosition - 8, 15, 0, 360);
      canvasContext.stroke();
    }

    if(currentLetter.error) {
      canvasContext.beginPath();
      canvasContext.strokeStyle = 'red';
      canvasContext.moveTo(xPosition, yPosition - 15);
      canvasContext.lineTo(xPosition + 15, yPosition);
      canvasContext.moveTo(xPosition + 15, yPosition - 15);
      canvasContext.lineTo(xPosition, yPosition);
      canvasContext.stroke();
    }
  }
}

function setDefaultKeyboard() {
  return JSON.parse(JSON.stringify(defaultKeyboard));
}

function drawAnswerState(answerState) {
  const xPosition = 100;
  const yPosition = 180;
  canvasContext.clearRect(xPosition, yPosition-30, canvas.width - xPosition, 40);
  canvasContext.font = "40px serif";
  canvasContext.fillText(answerState, xPosition, yPosition);
}

function winGame() {
  setTimeout(() => {
    alert("–ü–æ–±–µ–¥–∞ üéâ");
    startGame();
  });
}

document.addEventListener("keydown", (e) => {
  const key = e.key.toLocaleLowerCase();
  if(lettersState.map(key => key.char).includes(key)) {
    onKeyClick(key);
  }

  if(['escape', 'enter'].includes(key)){
    startGame();
  }
});
//==================================================       ===============
//                                                   LOGIC

let answer = '';
let answerState = '';
let mistakesCount = 0;
let lettersState;

startGame();

function startGame() {

 mistakesCount = 0;
 lettersState = setDefaultKeyboard();
 drawPerson(0);
 drawBoard(lettersState);
 generateWord();
}

function generateWord() {

answer = dictionary[Math.floor(Math.random() * dictionary.length)];

 answerState = '*'.repeat(answer.length);
 drawAnswerState(answerState);

}

function onKeyClick(letter) {

 if (mistakesCount === 7){
   alert('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã');
   startGame();
   return;
 }

 let letterFromState;
 for(let i = 0; i < lettersState.length; i++){
   if (letter === lettersState[i].char){
     letterFromState = lettersState[i];
      break;
   }
 }
 /*
 2. –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (lettersState) –Ω–∞–π–¥–∏—Ç–µ –∫–ª–∏–∫–Ω—É—Ç—ã–π —Å–∏–º–≤–æ–ª 
(letter). –ù–∞–π–¥–µ–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä letterFromState)
*/

 if(!letterFromState.error && !answer.includes(letter)) {
   mistakesCount++;
   letterFromState.error = true;  
 } 

 if (!letterFromState.success && answer.includes(letter)){
   letterFromState.success = true;
   let charsArray = answerState.split('');
   for (let i = 0; i < answer.length; i++) {
     if (letter === answer[i]){
       charsArray[i] = letter;
     }
   }
   answerState = charsArray.join('');
 }


 /*
 4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç –ª–∏ –∫–ª–∏–∫–Ω—É—Ç—ã–π —Å–∏–º–≤–æ–ª –≤ –æ—Ç–≤–µ—Ç–µ –∏–≥—Ä—ã –ò –Ω–µ –æ—Ç–º–µ—á–µ–Ω –ª–∏ —Å–∏–º–≤–æ–ª —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π (success)
 4.1. –û—Ç–º–µ—Ç—å—Ç–µ —Å–∏–º–≤–æ–ª —Å–≤–æ–π—Å—Ç–≤–æ–º success
 4.2. –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã "*" –Ω–∞ –∫–ª–∏–∫–Ω—É—Ç—ã–π —Å–∏–º–≤–æ–ª. –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∑–∏—Ü–∏—è –≤ –æ—Ç–≤–µ—Ç–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–∑–∏—Ü–∏–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è.
 –ü—Ä–∏–º–µ—Ä: 
 - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: '**********'
 - –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"
 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç –Ω–∞ "–æ"
 - –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞: '*–æ*–æ******'
 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç –Ω–∞ "—Ñ"
 - –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞: '—Ñ–æ*–æ***—Ñ**'
 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç –Ω–∞ "—Ç"
 - –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞: '—Ñ–æ—Ç–æ***—Ñ**'
*/
drawPerson(mistakesCount);
drawBoard (lettersState);
drawAnswerState (answerState);

 if (answer == answerState) {
   winGame();
 }
 /*
 5. –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∂–∏–∑–Ω–µ–π

 6. –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

 7. –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞

 8. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –∏–≥—Ä—ã
 8.1. –û—Ç–æ–±—Ä–∞–∂–∞–π—Ç–µ –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ
 */
}